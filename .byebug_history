continue
model_with_includes
Customer.first.product
model_with_includes.find(arguments['id']).product
model_with_includes.find(arguments['id'])
model_with_includes
includes
continue
model.reflections[plural.to_s]
model.reflections[singular.to_s]
model.reflections[singular]
model.reflections[plural]
model.reflections[singular]
plural
singular
nested
continue
node.selections.present?
node.selections
node.present?
table_name, node = handle_fragments(selection, ctx)
handle_fragments(selection, ctx)
tabel_name
continue
includes
continue
self
this
continue
includes.present?
includes
continue
@model.reflections['product'].present?
@model.reflections['product']
@model.reflections[next_model]
@model
model
next_model = ctx.ast_node.selections[0].name.singularize.classify.safe_constantize
ctx.ast_node.selections[0].name.singularize.classify.safe_constantize
ctx.ast_node.selections[0].name.singularize.classify
ctx.ast_node.selections[0].name.singularize
ctx.ast_node.selections[0].name
ctx.ast_node.selections[0]
ctx.ast_node.selections
ctx.ast_node
@model
includes
query(intro)
intro = "query IntrospectionQuery {\n    __schema {\n      queryType { name }\n      mutationType { name }\n      subscriptionType { name }\n      types {\n        ...FullType\n      }\n      directives {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        onOperation\n        onFragment\n        onField\n      }\n    }\n  }\n\n  fragment FullType on __Type {\n    kind\n    name\n    description\n    fields {\n      name\n      description\n      args {\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    enumValues {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...TypeRef\n    }\n  }\n\n  fragment InputValue on __InputValue {\n    name\n    description\n    type { ...TypeRef }\n    defaultValue\n  }\n\n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n        }\n      }\n    }\n  }"
result
continue
z.arguments
z
z = GraphQL::ActiveRecordExtensions::Field.new(type: CustomerType, model: Customer)
GraphQL::ActiveRecordExtensions::Field.new(type: CustomerType, model: Customer)
result
continue
result
continue
query(str)
result
continue
result
QueryType
Query
Schema.query
Schema
query
Schema.execute(query)
GraphQL::Query.new(Schema, query).result
GraphQL::Query.new(Schema, query)
query
continue
Customer.first.product
Customer.first
Customer.first.product
Product.first
Customer.first
